//pattern matching

case class Cat(val color: String, val Food: String)

val Oswald = new Cat("Black", "Milk")
val Henderson = new Cat("Ginger", "chips")
val Quentin  = new  Cat("Tabby and white", "Curry")

object ChipShop{
  def willServe(cat: Cat): Boolean = 
    cat match {
      case Cat(_,"chips") => true
      case _ => false
  }
}


ChipShop.willServe(Oswald)
ChipShop.willServe(Henderson)
ChipShop.willServe(Quentin)


//pattern matching 2
case class Director(val firstName: String, val lastName: String, 
               val yearOfBirth: Int){
  def name: String = {
  	s"$firstName $lastName"
  }
  
}

object Director{
  
  def older (dir1: Director, dir2: Director): Director = {
    if(dir1.yearOfBirth > dir2.yearOfBirth) dir1 else dir2
  }
  
}

object Film{
  
  def oldestDirectorAtTheTime(film1: Film, film2:Film):Director = {
    val dir1 = film1.director.yearOfBirth - film1.yearOfRelease
    val dir2 = film2.director.yearOfBirth - film2.yearOfRelease
    
    if(dir1 > dir2) film1.director else film2.director
  }
}

case class Film(val name: String, val yearOfRelease: Int, val imdbRating: Double, val director: Director){
  def directorsAge = {
    val age = yearOfRelease - director.yearOfBirth
    age
  }
  
  def isDirectedBy(dir: Director) = if(this.director.name == dir.name) true else false
}


val eastwood          = Director("Clint", "Eastwood", 1930)
val mcTiernan         = Director("John", "McTiernan", 1951)
val nolan             = Director("Christopher", "Nolan", 1970)
val someBody          = Director("Just", "Some Body", 1990)
val memento           = Film("Memento", 2000, 8.5, nolan)
val darkKnight        = Film("Dark Knight", 2008, 9.0, nolan)
val inception         = Film("Inception", 2010, 8.8, nolan)

val highPlainsDrifter = Film("High Plains Drifter", 1973, 7.7, eastwood)
val outlawJoseyWales  = Film("The Outlaw Josey Wales", 1976, 7.9, eastwood)
val unforgiven        = Film("Unforgiven", 1992, 8.3, eastwood)
val granTorino        = Film("Gran Torino", 2008, 8.2, eastwood)
val invictus          = Film("Invictus", 2009, 7.4, eastwood)

val predator          = Film("Predator", 1987, 7.9, mcTiernan)
val dieHard           = Film("Die Hard", 1988, 8.3, mcTiernan)
val huntForRedOctober = Film("The Hunt for Red October", 1990, 7.6, mcTiernan)
val thomasCrownAffair = Film("The Thomas Crown Affair", 1999, 6.8, mcTiernan)

object Dad {
  def rate(film: Film): Double =
    film match {
      case Film(_, _, _, Director("Clint", "Eastwood", _)) => 10.0
      case Film(_, _, _, Director("John", "McTiernan", _)) => 7.0
      case _ => 3.0
    }
}

Dad.rate(memento)
Dad.rate(unforgiven)
Dad.rate(granTorino)
